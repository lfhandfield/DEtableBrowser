
#QUEUE=yesterday
#NBCORES=2
#MEMGIGA=40

# Arguments 
# [1] this script name (arguments are shifted by one if used by Rscript...)
# [2] input selector string
# [3] output RDS file path
args <- commandArgs(TRUE)

argsall <- commandArgs(FALSE)
match <- grep("--file=", argsall)
if (length(match) > 0){
	path <- dirname(normalizePath(sub("--file=","",argsall[match])))
}else stop("run this using Rscript only")
rm(argsall)
rm(match)
print("reading")
print(args[1]);runargs <- readRDS(args[1])
print(args[2]);qde <- readRDS(args[2])
print(args[3]);base <- readRDS(args[3])

source("/nfs/users/nfs_l/lh20/Rcode.R")
library(Seurat)
library(methods)
output = list()
output$signifDE <- list()

	if (runargs$dem == "DQ"){
		param <- c("deseq.log10pvalue", "deseq.log2FC", "deseq.basemean", "dropoutPosClass", "dropoutNegClass", "permute.pval")
	}else if runargs$dem == ("WC"){
		param = c("wilcox.log10pval","wilcox.logitAuroc","meanTPM","wilcox.log2FC","CoverageEnrichment", "dropoutPosClass", "dropoutNegClass", "permute.pval")
	}else{
		param = c("cox.log10pvalue","cox.coef", "permute.pval")

	}
	if (runargs$cel$nbpermute == 0) param <- param[1:(length(param)-1)];

	funcfilt <- readRDS("/lustre/scratch117/cellgen/team218/lh20/GPNames.rds")

	fltlist <- list();
	allcelltype <- c();
	if (false){ # choose if statistically significant significance is ignored (noly positive FC required
	for(i in names(runargs$cel$Comparisons)){
		tmptmpallnames <- unique(c(colnames(base[[paste(i, "POS", sep="_")]]$deseq.log10pvalue),colnames(base[[paste(i, "NEG", sep="_")]]$deseq.log10pvalue)))
		if (sum(colnames(base[[paste(i, "POS", sep="_")]]$deseq.log10pvalue) == colnames(base[[paste(i, "NEG", sep="_")]]$deseq.log10pvalue)) < length(tmptmpallnames)){
			fltlist[[i]] = data.frame(row.names= rownames(base[[paste(i, "POS", sep="_")]]$deseq.log10pvalue))
			for(k in tmptmpallnames){
				if (k %in% colnames(base[[paste(i, "POS", sep="_")]]$deseq.log10pvalue)){
					if (k %in% colnames(base[[paste(i, "NEG", sep="_")]]$deseq.log10pvalue)){
						fltlist[[i]][[k]] = (base[[paste(i, "POS", sep="_")]]$deseq.log2FC[[k]] > 0) | (base[[paste(i, "NEG", sep="_")]]$deseq.log2FC[[k]] > 0)
						fltlist[[i]][[k]] = fltlist[[i]][[k]] & ((base[[paste(i, "POS", sep="_")]]$dropoutPosClass[[k]] > 0.1 ) | (base[[paste(i, "NEG", sep="_")]]$dropoutPosClass[[k]] > 0.1))
					}else{
						print(dim(fltlist[[i]]))
						print(colnames(fltlist[[i]]))
						fltlist[[i]][[k]] = (base[[paste(i, "POS", sep="_")]]$deseq.log2FC[[k]] > 0)
						fltlist[[i]][[k]] = fltlist[[i]][[k]] & (base[[paste(i, "POS", sep="_")]]$dropoutPosClass[[k]] > 0.1)
					}
				}else {
					print(dim(fltlist[[i]]))
					print(colnames(fltlist[[i]]))
					fltlist[[i]][[k]] = (base[[paste(i, "NEG", sep="_")]]$deseq.log2FC[[k]] > 0)
					fltlist[[i]][[k]] = fltlist[[i]][[k]] & (base[[paste(i, "NEG", sep="_")]]$dropoutPosClass[[k]] > 0.1)
				}
			}
		}else{
			fltlist[[i]] = (base[[paste(i, "POS", sep="_")]]$deseq.log2FC > 0) | (base[[paste(i, "NEG", sep="_")]]$deseq.log2FC > 0)
			fltlist[[i]] = fltlist[[i]] & ((base[[paste(i, "POS", sep="_")]]$dropoutPosClass > 0.1 )| (base[[paste(i, "NEG", sep="_")]]$dropoutPosClass > 0.1))
		}
		print(paste(i, "has", colnames(qde[[i]][[1]])))
		print(colnames(fltlist[[i]]))
		for(k in names(fltlist[[i]])) {
			print(paste(i, " and ",k," has nas ", sum(is.na(fltlist[[i]][[k]]))))
		}
		allcelltype <- unique(c(allcelltype, colnames(qde[[i]][[1]])))
	}
	}else{
	for(i in names(runargs$cel$Comparisons)){
		tmptmpallnames <- unique(c(colnames(base[[paste(i, "POS", sep="_")]]$deseq.log10pvalue),colnames(base[[paste(i, "NEG", sep="_")]]$deseq.log10pvalue)))
		if (sum(colnames(base[[paste(i, "POS", sep="_")]]$deseq.log10pvalue) == colnames(base[[paste(i, "NEG", sep="_")]]$deseq.log10pvalue)) < length(tmptmpallnames)){
			fltlist[[i]] = data.frame(row.names= rownames(base[[paste(i, "POS", sep="_")]]$deseq.log10pvalue))
			for(k in tmptmpallnames){
				if (k %in% colnames(base[[paste(i, "POS", sep="_")]]$deseq.log10pvalue)){
					if (k %in% colnames(base[[paste(i, "NEG", sep="_")]]$deseq.log10pvalue)){
						fltlist[[i]][[k]] = ((base[[paste(i, "POS", sep="_")]]$deseq.log10pvalue[[k]] < -1.3)&(base[[paste(i, "POS", sep="_")]]$deseq.log2FC[[k]] > 0)) | ((base[[paste(i, "NEG", sep="_")]]$deseq.log10pvalue[[k]] < -1.3)&(base[[paste(i, "NEG", sep="_")]]$deseq.log2FC[[k]] > 0) )
						fltlist[[i]][[k]] = fltlist[[i]][[k]] & ((base[[paste(i, "POS", sep="_")]]$dropoutPosClass[[k]] > 0.1 ) | (base[[paste(i, "NEG", sep="_")]]$dropoutPosClass[[k]] > 0.1))
					}else{
						print(dim(fltlist[[i]]))
						print(colnames(fltlist[[i]]))
						fltlist[[i]][[k]] = (base[[paste(i, "POS", sep="_")]]$deseq.log10pvalue[[k]] < -1.3)&(base[[paste(i, "POS", sep="_")]]$deseq.log2FC[[k]] > 0)
						fltlist[[i]][[k]] = fltlist[[i]][[k]] & (base[[paste(i, "POS", sep="_")]]$dropoutPosClass[[k]] > 0.1)
					}
				}else {
					print(dim(fltlist[[i]]))
					print(colnames(fltlist[[i]]))
					fltlist[[i]][[k]] = (base[[paste(i, "NEG", sep="_")]]$deseq.log10pvalue[[k]] < -1.3)&(base[[paste(i, "NEG", sep="_")]]$deseq.log2FC[[k]] > 0)
					fltlist[[i]][[k]] = fltlist[[i]][[k]] & (base[[paste(i, "NEG", sep="_")]]$dropoutPosClass[[k]] > 0.1)
				}
			}
		}else{
			fltlist[[i]] = ((base[[paste(i, "POS", sep="_")]]$deseq.log10pvalue < -1.3)&(base[[paste(i, "POS", sep="_")]]$deseq.log2FC > 0)) | ((base[[paste(i, "NEG", sep="_")]]$deseq.log10pvalue < -1.3)&(base[[paste(i, "NEG", sep="_")]]$deseq.log2FC > 0))
			fltlist[[i]] = fltlist[[i]] & ((base[[paste(i, "POS", sep="_")]]$dropoutPosClass > 0.1 )| (base[[paste(i, "NEG", sep="_")]]$dropoutPosClass > 0.1))
		}
		print(paste(i, "has", colnames(qde[[i]][[1]])))
		print(colnames(fltlist[[i]]))
		allcelltype <- unique(c(allcelltype, colnames(qde[[i]][[1]])))
	}
	}




	bckpath <- paste(args[4],"_bck",sep="")
	if (file.exists(bckpath)){ # already done eh?
		print("Reusing extremes")
		output <- readRDS(bckpath)
	}else{
		for(i in names(runargs$cel$Comparisons)){
			print(paste("Finding Significant Extremes for", i))
#			if (paste(i, "POS", sep="_") %in% names(base)) {
#				if (paste(i, "NEG", sep="_") %in% names(base)) {
#				}else{
#					fltlist[[i]] = (base[[paste(i, "POS", sep="_")]]$deseq.log10pvalue < -1.3)
#					fltlist[[i]] = fltlist[[i]] & (base[[paste(i, "POS", sep="_")]]$dropoutPosClass > 0.1)
#				}
#			}else if (paste(i, "NEG", sep="_") %in% names(base)) {
#				fltlist[[i]] = (base[[paste(i, "NEG", sep="_")]]$deseq.log10pvalue < -1.3)
#				fltlist[[i]] = fltlist[[i]] & (base[[paste(i, "NEG", sep="_")]]$dropoutPosClass > 0.1)
#			}else next
			

			# TODO fix to NEG!!
			print("timetorun")
			print(colnames(fltlist[[i]]))
			output$signifDE[[i]] <- getExtremes(qde[[i]],maxlist.toreport=5000,selected.colnames= colnames(fltlist[[i]]),pval.grep.string= param[1] ,value.name= param[2],meta.names=param[3:length(param)],do.fdr.correction=T,filter.table= fltlist[[i]],  funcfilt=funcfilt)
			allcelltype <- unique(c(allcelltype, colnames(qde[[i]][[1]])))
		}
		#saveRDS(output, args[4])
		print("Saving Backup")
		saveRDS(output, bckpath)

	}
	print(allcelltype)

# concatenate comparisons into single table

	output$list.celltypes <- allcelltype
	output$list.comparisons <- names(runargs$cel$Comparisons)
	if ("rawDE" %in% names(output)){
		if( is.null(names(output$rawDE))) output$rawDE <- NULL 
	}

	if (!"rawDE" %in% names(output)){
	output$rawDE <- list();
	for(i in allcelltype) {
		for( j in names(runargs$cel$Comparisons)){
			if (i %in% names(qde[[j]][[names(qde[[j]])[1]]])){
				for( k in names(qde[[j]])){
					if (k != "runargs") {
					if (is.null(output$rawDE[[k]])){
						output$rawDE[[k]] <- data.frame(row.names = rownames(qde[[j]][[k]]))
						output$rawDE[[k]][[gsub(" ", "_",paste(i,j))]] <- qde[[j]][[k]][,i]
					}else{
						map <- match(rownames(output$rawDE[[k]]),rownames(qde[[j]][[k]]) )
						output$rawDE[[k]][[gsub(" ", "_",paste(i,j))]] <- qde[[j]][[k]][map,i]
					}
					}
				}
			}else{
				print(paste("no", i, "in", j))
			}
		}
	}
	saveRDS(output, args[4])
	}

	print(names(fltlist))
	output$consensusDE <- list()
	print("computing consensus")
	for(i in names(runargs$cel$Consensus)){
		print(paste("Processing", i))
		print(runargs$cel$Consensus[[i]])
		for(j in runargs$cel$Consensus[[i]]) {print(colnames(fltlist[[j]]));print(dim(fltlist[[j]]))}
	output$consensusDE[[i]] <- getMultiExtremes(qde,runargs$cel$Consensus[[i]], maxlist.toreport=5000, pval.grep.string= param[1] ,value.name= param[2],meta.names=param[3:length(param)],do.fdr.correction=T,filter.table= fltlist, funcfilt=funcfilt)
			
	#	for(j in runargs$cel$Consensus[[i]]){
	#		tmp <- output$rawDE[[i]]
	#		colnames(tmp) <- paste(colnames(tmp), j, sep="_")
	#		if (is.null(output$consenOrgRawDE[[i]])) output$consenOrgRawDE[[i]] <- tmp
	#			else output$consenOrgRawDE[[i]] <- cbind(output$consenOrgRawDE[[i]], tmp)
	#	}
	#	if (!is.null(output$consenOrgRawDE[[i]])) output$consenOrgRawDE[[i]] <- output$consenOrgRawDE[[i]][, order(colnames(output$consenOrgRawDE[[i]]))]
	}
saveRDS(output, args[4])

