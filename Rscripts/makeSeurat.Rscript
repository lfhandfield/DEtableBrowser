
#QUEUE=yesterday
#NBCORES=1
#MEMGIGA=40


# Arguments 
# [1] this script name (arguments are shifted by one if used by Rscript...)
# [2] input selector string
# [3] output RDS file path
args <- commandArgs(TRUE)
library(Seurat)
library(methods)
argsall <- commandArgs(FALSE)
match <- grep("--file=", argsall)
if (length(match) > 0){
	path <- dirname(normalizePath(sub("--file=","",argsall[match])))
}else stop("run this using Rscript only")
rm(argsall)
rm(match)
source(file.path(path,"../Rcode.R"))
print("Pipeline to Generate Seurat object to file:")
print(args[3])
print("input selected:")
print(args[2])

pathin = c("out15923B3_W-0", "out15923C3_W-0","out15923D3_W-0","out15923E3_W-0", "out16609A10_W-0", "out16609B10_W-0","out16609C10_W-0","out16609D10_W-0", 
"out16146A7_W-0", "out16146B7_W-0","out16146C7_W-0","out16146D7_W-0","out16630A11_W-0", "out16630B11_W-0","out16630C11_W-0","out16630D11_W-0",
"out16640E11_W-0", "out16640F11_W-0","out16640G11_W-0","out16640H11_W-0", "out16807B12_W-0", "out16807C12_W-0","out16807D12_W-0","out16807E12_W-0",
"out16893E6_W-0", "out16893F6_W-0","out16893G6_W-0", "out16893H6_W-0","out16892E7_W-0", "out16892F7_W-0","out16892G7_W-0","out16892H7_W-0",
"out16968A10_W-0", "out16968B10_W-0","out16968C10_W-0", "out16968D10_W-0")
refintrons= "humanintrons_mk3"

pathin = c("out15923B3_W-0", "out15923C3_W-0","out15923D3_W-0","out15923E3_W-0", "out16609A10_W-0", "out16609B10_W-0","out16609C10_W-0","out16609D10_W-0", 
"out16146A7_W-0", "out16146B7_W-0","out16146C7_W-0","out16146D7_W-0","out16630A11_W-0", "out16630B11_W-0","out16630C11_W-0","out16630D11_W-0",
"out16640E11_W-0", "out16640F11_W-0","out16640G11_W-0","out16640H11_W-0", "out16807B12_W-0", "out16807C12_W-0","out16807D12_W-0","out16807E12_W-0",
"out16893E6_W-0", "out16893F6_W-0","out16893G6_W-0", "out16893H6_W-0","out16892E7_W-0", "out16892F7_W-0","out16892G7_W-0","out16892H7_W-0",
"out16968A10_W-0", "out16968B10_W-0","out16968C10_W-0", "out16968D10_W-0")
refintrons= "raw_feature_bc_matrix"

pathinold = c("out15923B3_J-0", "out15923C3_J-0","out15923D3_J-0","out15923E3_J-0", "out16609A10_J-0", "out16609B10_J-0","out16609C10_J-0","out16609D10_J-0", 
"out16146A7_J-0", "out16146B7_J-0","out16146C7_J-0","out16146D7_J-0","out16630A11_I-0", "out16630B11_I-0","out16630C11_J-0","out16630D11_I-0",
"out16640E11_J-0", "out16640F11_J-0","out16640G11_J-0","out16640H11_J-0", "out16807B12_J-0", "out16807C12_J-0","out16807D12_J-0","out16807E12_J-0",
"out16893E6_J-0", "out16893F6_J-0","out16893G6_J-0", "out16893H6_J-0","out16892E7_J-0", "out16892F7_J-0","out16892G7_J-0","out16892H7_J-0",
"out16968A10_J-0", "out16968B10_J-0","out16968C10_J-0", "out16968D10_J-0")

pathex = c("out15923B3_0-0", "out15923C3_0-0","out15923D3_0-0", "out15923E3_0-0","out16609A10_E-0", "out16609B10_E-0","out16609C10_E-0", "out16609D10_E-0",
"out16146A7_0-0", "out16146B7_0-0","out16146C7_0-0","out16146D7_0-0","out16630A11_E-0", "out16630B11_E-0","out16630C11_E-0","out16630D11_E-0",
"out16640E11_E-0", "out16640F11_E-0","out16640G11_E-0", "out16640H11_E-0","out16807B12_E-0", "out16807C12_E-0","out16807D12_E-0","out16807E12_E-0",
"out16893E6_E-0", "out16893F6_E-0","out16893G6_E-0", "out16893H6_E-0","out16892E7_E-0", "out16892F7_E-0","out16892G7_E-0","out16892H7_E-0",
"out16968A10_E-0", "out16968B10_E-0","out16968C10_E-0", "out16968D10_E-0")

prefix = c("P1803Fv1-", "P1803Fv1+", "P2911Fv1-","P2911Fv1+","P1803Fv2-","P1803Fv2+","P2911Fv2-","P2911Fv2+",
           "SD02011-" , "SD02011+" , "P408-"    ,"P408+"    ,"C1197F-"  ,"C1197F+"  ,"P616F-"   ,"P616F+"   ,
           "C0497F-"  , "C0497F+"  , "P1704F-"  ,"P1704F+"  ,"SD03514-" ,"SD03514+" ,"P4206F-"  ,"P4206F+"  ,
           "SD00717F-", "SD00717F+", "P5815F-"  ,"P5815F+"  ,"SD01713-" ,"SD01713+" ,"P5903F-"  ,"P5903F+"  ,
	   "SD01317F-", "SD01317F+", "P6513F-"  ,"P6513F+")

thatmeta = data.frame(row.names=prefix)
thatmeta[["genotype"]] =rep(c("Ctrl", "APP_V717I","Ctrl", "APP_V717I", "Ctrl", "APP_V717I", "Ctrl", "APP_V717I", "Ctrl", "PSEN1_intron4", "Ctrl", "APP_V717I", "Ctrl", "M1461", "Ctrl",  "PSEN1_intron4", "Ctrl", "PSEN1_intron4"),each=2)
thatmeta[["sex"]] =rep(c("F", "F","M", "M", "F", "F", "M", "F", "M"),each=4)
thatmeta[["disease"]] =rep(c("Ctrl", "REP","REP", "FAD", "Ctrl", "FAD", "Ctrl", "FAD", "Ctrl", "FAD", "Ctrl", "FAD", "Ctrl", "FAD", "Ctrl",  "FAD", "Ctrl", "FAD"),each=2)
thatmeta[["neuN"]] =rep(c("-", "+"),18)
thatmeta[["genotype_merged"]] =rep(c("Ctrl_APP", "APP","Ctrl_APP", "APP", "Ctrl_APP", "APP", "Ctrl_APP", "APP", "Ctrl_PSEN1", "PSEN1", "Ctrl_APP", "APP", "Ctrl_PSEN1", "PSEN1", "Ctrl_PSEN1",  "PSEN1", "Ctrl_PSEN1", "PSEN1"),each=2)
thatmeta[["patient"]] = sub("\\+","",sub("\\-","",prefix))
thatmeta[["batch"]] = rep(c(2, 2, 1, 3, 5, 4, 8, 6, 7),each=4)


#to hope mapping with 0.4, a meatUMI >= 125 is needed
#thresh = c(25,50,25,12,40,75,40,75
#,50,100,40,100,75,100,20,75
#,125,125,15,30,35,75,50,75)

#thresh_umiw = rep(200,32)
threshsoup = c(0.6,0.15,0.55,0.42,0.78,0.27,0.45,0.33
,0.25,-0.05,0.5,0.20,0.22,0.05,0.55,0.15
,0.07,0.04,0.83,0.9,0.25,0.05,0.60,0.25
,0.05,0.05,0.05,0.05
)

# defined for threshgene = thresh = rep(c(40,60,30,48),9) ;

threshgene= c(
40,60,20,30,40,60,40,60, #  1- 8
40,60,40,60,40,60,40,60, #  9-16
40,60,12,18,40,60,22,60, # 17-24
40,60,12,40,40,60,40,60, # 25-32
40,60,40,60)
thresh <- threshgene

threshsoup = rep(1,36)
threshslope = rep(0.05,36)
threshgene <- thresh 
s <- switch(args[2],
"0"= c( 1, 2, 7, 8, 9,10,13,14,17,18,21,22),
"1"= c( 5, 6, 7, 8, 9,10,13,14,17,18,21,22),
"2"= c( 9,10,11,12, 1, 2,13,14,17,18,21,22),
"3"= c(13,14,15,16, 1, 2, 9,10,17,18,21,22),
"4"= c(17,18,19,20, 1, 2, 9,10,13,14,21,22),
"5"= c(21,22,23,24, 1, 2, 9,10,13,14,17,18),
"p1"= c( 1, 2, 7, 8),
"p2"= c( 9,10,11,12),
"p3"= c(13,14,15,16),
"p4"= c(17,18,19,20),
"p5"= c(21,22,23,24),
"p6"= c(25,26,27,28),
"p7"= c(29,30,31,32),
"p8"= c(33,34,35,36),
"11"= c(1,2,9,10,13,14,17,18,21,22,25,26,29,30,33,34),
"12"= c(1,2,9,10,13,14,17,18,21,22,25,26,29,30,33,34),
"13"= c(1,2,7:36),
"14"= c(2,3,10,5,6,8,15,17,18,25,26,35),
1:36
)



if (switch(args[2],"0"= T,"1"= T,"2"= T,"3"= T,"4"= T,"5"= T,F)){
	for(i in 5:12) {
		thresh[s[i]] <- 120 
		threshsoup[s[i]] <- 1
		threshslope[s[i]] <- 0
	}
}

if (switch(args[2],"11"= T,F)){
	thresh <- rep(c(90,120),18);
	for(i in 1:(length(s))) {
		threshsoup[s[i]] <- 1
		threshslope[s[i]] <- 0
	}
}
if (switch(args[2],"12"= T,F)){
	thresh <- rep(c(60,90),18);
	for(i in 1:(length(s))) {
		threshsoup[s[i]] <- 1
		threshslope[s[i]] <- 0
	}
}
if (switch(args[2],"13"= T,F)){
	#thresh <- rep(c(40,60),18);
	for(i in 1:(length(s))) {
		threshsoup[s[i]] <- 1
		threshslope[s[i]] <- 0
	}
}


threshgene <- thresh 
genetype <- readRDS("/lustre/scratch117/cellgen/team218/lh20/human_genetypes.rds")
filtgene <- c("LINGO1","MEG3","RASGEF1B","MALAT1", "MT-ND1", "MT-ND2", "MT-ND3", "MT-ND4", "MT-ND4L", "MT-ND5", "MT-ND6", "MT-CO1", "MT-CO2", "MT-CO3", "MT-ATP6", "MT-ATP8", "MT-CYB")
filtclasses <- c("RPMASK_DNA", "RPMASK_LINE", "RPMASK_Low_complexity","RPMASK_LTR","RPMASK_RC","RPMASK_Retroposon","RPMASK_RNA","RPMASK_rRNA","RPMASK_Satellite","RPMASK_scRNA","RPMASK_Simple_repeat","RPMASK_SINE","RPMASK_snRNA","RPMASK_srpRNA","RPMASK_tRNA","RPMASK_Unknown" )
filtgene <- c(filtgene, as.character(genetype$name[!is.na(match(genetype$biotype, filtclasses))]))

#sro <- CreateSeuratCustomfilter( paste("/lustre/scratch117/cellgen/team218/lh20/", pathin, "/outs/raw_gene_bc_matrices/humanintrons/",sep="")[s], prefix[s], paste("/lustre/scratch117/cellgen/team218/lh20/", pathex, "/outs/raw_gene_bc_matrices/GRCh38/",sep="")[s], gene_metalist = filtgene, threshold.UMI=thresh[s], threshold.GENE=threshgene[s], do.print.soup.pdf=F)
#sro <- CreateSeuratCustomfilter( paste("/lustre/scratch117/cellgen/team218/lh20/", pathin, "/outs/raw_gene_bc_matrices/",refintrons ,"/",sep="")[s], prefix[s], paste("/lustre/scratch117/cellgen/team218/lh20/", pathex, "/outs/raw_gene_bc_matrices/GRCh38/",sep="")[s], gene_metalist = filtgene, threshold.UMI=thresh[s], threshold.GENE=threshgene[s], threshold.soup =threshsoup[s], threshold.soup.slope =threshslope[s], do.print.soup.pdf=Fi,do.rename=T); print(table(sro@meta.data$orig.ident))
sro <- CreateSeuratCustomfilter( paste("/lustre/scratch117/cellgen/team218/lh20/", pathin, "/outs/",refintrons ,"/",sep="")[s], prefix[s], paste("/lustre/scratch117/cellgen/team218/lh20/", pathex, "/outs/raw_gene_bc_matrices/GRCh38/",sep="")[s], gene_metalist = filtgene, threshold.UMI=thresh[s], threshold.GENE=threshgene[s], threshold.soup =threshsoup[s], threshold.soup.slope =threshslope[s], do.print.soup.pdf=F,do.rename=T,genemeta=genetype); print(table(sro@meta.data$orig.ident))

projmeta <- thatmeta[ as.character(sro@meta.data$orig.ident), ]
rownames(projmeta) <- rownames(sro@meta.data)

sro <- AddMetaData( sro, projmeta)
sro@misc$meta.color[["orig.ident"]] <- mydoublerainbow(rep(2,length(s)/2), names=prefix[s])
sro@misc$UMIthreshold <- setNames(as.list(thresh[s]), prefix[s])
sro@misc$GENEthreshold <- setNames(as.list(threshgene[s]), prefix[s])

genetype <- readRDS("human_genetypes.rds")
geneann <-  as.data.frame(Matrix::rowSums(sro@raw.data))
rownames(geneann) <-  make.names(rownames(sro@raw.data),unique=T)
damap <- match(rownames(sro@raw.data), genetype[,2])

geneann$accession[!is.na(damap)] <- as.character(genetype[damap[!is.na(damap)],1])
geneann$biotype[!is.na(damap)] <- as.character(genetype[damap[!is.na(damap)],3])
geneann$biotype <- as.factor(geneann$biotype)
sro@misc$meta.gene <- geneann

varg <- DoFindMarkerGenes(sro)
varg <- rownames(varg) # [varg$soupfraction_average < 0.5]
if (length(varg) > 2000) varg <- varg[1:2000]
#varg <- readRDS("/lustre/scratch117/cellgen/team218/lh20/happyfrozenmarkers.rds")

#sro <- NormalizeSeurat(sro,varg,nb.pc=50)

cw <- 1.0 - 1000 / (1000 - min(thresh[s]) + sro@meta.data$nGene)
saveRDS(sro, args[3])
print("Normalizing")
sro <- NormalizeSeurat(sro,varg,nb.pc=50, cell.weight= cw,do.show.elbow=F)
saveRDS(sro, args[3])
sro <- DoItAllSeurat(sro,resolution=0.8, reduction.type="cwpca")
saveRDS(sro, args[3])

ind <- readRDS("/lustre/scratch117/cellgen/team218/lh20/MTG18.ind.rds")
tmp <- runSCMapFromSeurat(sro,ind,clustername="MTG18",rename.cluster="res.0.8")

saveRDS(tmp$sro, args[3])

echo out <- DEcalcIntersectionnn$biotype <- as.factor(geneann$biotype)
echo (tmp$sro, meta.partition="MTG_cluster", meta.positive=c( "disease", "FAD"), meta.use= c("disease", "FAD", "Ctrl"))
tmp$sro@misc$DE.inMTG <- out

echo saveRDS(tmp$sro, args[3])

